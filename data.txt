npx nodemon src/app.js

gadi.r@mail.pucv.cl
1234

romina.h@mail.pucv.cl
1234

pepito123@gmail.com
1234


EL "calificar" aparece cuando el tutor le acepto la solicitud al  usuario respectivo por primera vez.
Las asignaturas en los resultados de busqueda aparecen cuando el Tutor tiene creada una tutoria con X estudiante.
-- tutores
SELECT u.*, 
       uni.nombre as universidad, 
       t.precioporhora, 
       t.horafinal, 
       obtener_promedio_calificacion(tu.id) as valoracion_promedio,
       a.asignaturas_impartidas, 
       COUNT(*) OVER() as total_count
    FROM usuarios u 
    INNER JOIN tutores tu ON u.id_tutor = tu.id 
    INNER JOIN universidades uni ON uni.id = u.id_universidad 
    LEFT JOIN LATERAL get_tutoria_precio_mas_bajo(u.id_tutor) t ON TRUE 
    LEFT JOIN LATERAL get_tutorias_impartidas(u.id_tutor) a ON TRUE 
	
	
-- administradores

  SELECT u.*, 
       uni.nombre as universidad, 
       t.precioporhora, 
       t.horafinal, 
       obtener_promedio_calificacion(tu.id) as valoracion_promedio,
       a.asignaturas_impartidas, 
       COUNT(*) OVER() as total_count
    FROM usuarios u 
    INNER JOIN administradores tu ON u.id_administrador = tu.id 
    INNER JOIN universidades uni ON uni.id = u.id_universidad 
    LEFT JOIN LATERAL get_tutoria_precio_mas_bajo(u.id_tutor) t ON TRUE 
    LEFT JOIN LATERAL get_tutorias_impartidas(u.id_tutor) a ON TRUE 
	
	
-- usuarios (ver todos)
SELECT u.*, 
       uni.nombre as universidad, 
       t.precioporhora, 
       t.horafinal, 
      -- obtener_promedio_calificacion(tu.id) as valoracion_promedio,
       a.asignaturas_impartidas, 
       COUNT(*) OVER() as total_count
    FROM usuarios u 
   -- INNER JOIN tutores tu ON u.id_tutor = tu.id 
    INNER JOIN universidades uni ON uni.id = u.id_universidad 
    LEFT JOIN LATERAL get_tutoria_precio_mas_bajo(u.id_tutor) t ON TRUE 
    LEFT JOIN LATERAL get_tutorias_impartidas(u.id_tutor) a ON TRUE 
	
	


	select * from usuarios;
	select * from administradores;
	
	delete from administradores 


    	
BEGIN;
delete from comentarios where id_estudiante ='9a40bc1f';
delete from solicitudes where id_estudiante ='9a40bc1f';
delete from tutorias where id_estudiante ='9a40bc1f';
-- Eliminar de la tabla estudiantes
DELETE FROM estudiantes WHERE id = '9a40bc1f';
-- Eliminar de la tabla usuarios
DELETE FROM usuarios WHERE id = '9a40bc1f';
COMMIT;

select * from usuarios;

BEGIN;
delete from comentarios where id_estudiante ='9a40bc1f';
delete from solicitudes where id_estudiante ='9a40bc1f';
delete from tutorias where id_estudiante ='9a40bc1f';
-- Eliminar de la tabla usuarios
DELETE FROM usuarios WHERE id = '9a40bc1f';
-- Eliminar de la tabla estudiantes
DELETE FROM estudiantes WHERE id = '9a40bc1f';
COMMIT;

TODO:
solucionar horarios disponibles en tutores (que detecte semanas tambien)




BEGIN;
delete from imparten where id_tutor ='256f77fd';
delete from solicitudes where id_tutor ='256f77fd';
delete from comentarios where id_tutor ='256f77fd';
delete from horariosdisponibles where id_usuario ='256f77fd';
delete from tutorias where id_tutor ='256f77fd';
-- Actualizar la referencia de la clave for√°nea en la tabla usuarios
UPDATE usuarios SET id_estudiante = NULL, id_administrador = NULL, id_tutor = NULL WHERE id_estudiante = '256f77fd';
-- Eliminar de la tabla estudiantes
DELETE FROM tutores WHERE id = '256f77fd';
-- Eliminar de la tabla usuarios
DELETE FROM usuarios WHERE id = '256f77fd';
COMMIT;




alter table horariosdisponibles
add column semana integer,
add column anio integer;

CREATE TABLE IF NOT EXISTS public.recuperacionescontrasena (
    email VARCHAR(200) PRIMARY KEY,
    codigo_recuperacion VARCHAR(100) NOT NULL,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    id_usuario VARCHAR(200),
    CONSTRAINT fk_usuario FOREIGN KEY (id_usuario) REFERENCES public.usuarios(id)
);

ALTER TABLE reportes
ADD COLUMN estado VARCHAR(100) DEFAULT 'pendiente';